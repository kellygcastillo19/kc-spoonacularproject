{"ast":null,"code":"var _jsxFileName = \"/Users/KellyCastillo/finalproject/src/pages/Recipe.jsx\",\n  _s = $RefreshSig$();\n// Imports useEffect and useState React features \n// Reference: https://reactjs.org/docs/hooks-intro.html\nimport { useEffect, useState } from \"react\";\n// Imports the useParams hook from React Router\n// Reference: https://javascript.plainenglish.io/react-router-how-to-use-the-useparams-hook-321a6461732\nimport { useParams } from \"react-router-dom\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Recipe() {\n  _s();\n  // useParams returns an object that contains the parameters of the current URL\n  // useParams is being used to asign the returned object to a variable called params\n  // Example: If the URL of the React Router component is /products/123, \n  // and the route is defined with a dynamic parameter like /products/:productId, \n  // then the object returned by useParams would be { productId: '123' }\n  // You can then access the value of the productId parameter by accessing params.productId.\n  let params = useParams();\n  // useState declares a \"state variable\" called details\n  // useState returns an array with two items: the current state of details, which is set to the initial state of an empty object useState({})\n  // setDetails is the function that updates the current state\n  const [details, setDetails] = useState({});\n  // useState declares a \"state variable\" called activeTab\n  // useState returns an array with two items: the current state of details, which is set to the initial state of an string \"instructions\"\n  // setActive is the function that updates the current state\n  const [activeTab, setActiveTab] = useState(\"instructions\");\n\n  // Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n  // The async function is a way to write asynchronous code in JavaScript, allowing other code to run in the meantime\n  // The async function is a special type of function that returns a promise\n  // A promise is an object that represents the result of the async function\n  // The await expression pauses the execution of the function until a promise is resolved\n  // The fetchDetails function sends an HTTP request to the Spoonacular API and waits for a response\n  // Once the response is received, it converts the response to JSON and returns the resulting data\n  // setDetails(detailData) will update the current state of the details state variable to the value of the object detailData\n  const fetchDetails = async () => {\n    const data = await fetch(`https://api.spoonacular.com/recipes/${params.name}/information?apiKey=e651b079eb2a4f55a0b04627fff59f28`);\n    const detailData = await data.json();\n    setDetails(detailData);\n  };\n\n  // The function passed to useEffect calls a function called fetchDetails\n  // The second argument to useEffect is an array containing the params.name variable\n  // This means that the fetchDetails function will be called after the component renders and any time the params.name value changes\n  useEffect(() => {\n    fetchDetails();\n  }, [params.name]);\n\n  // html that is returned by the function fetchDetails\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detailWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: details.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: details.image,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        // If activeTab equals \"instructions,\" then add the class \"active\" to it, else do not add anything\n        // When Instructions button is clicked, a function runs so that setActiveTab is set to \"instructions\"\n        className: activeTab === 'instructions' ? 'active' : '',\n        onClick: () => setActiveTab(\"instructions\"),\n        children: \"Instructions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        // If activeTab equals \"ingredients,\" then add the class \"active\" to it, else do not add anything\n        // When Ingredients button is clicked, a function runs so that setActiveTab is set to \"ingredients\"\n        className: activeTab === 'ingredients' ? 'active' : '',\n        onClick: () => setActiveTab(\"ingredients\"),\n        children: \"Ingredients\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), activeTab === 'instructions' &&\n      /*#__PURE__*/\n      // The && operator is a logical operator that will evaluate to the value of the second operand if the first operand is true, and will evaluate to false if the first operand is false\n      // If activeTab equals 'instructions', this expression will be true and the block of html that follows will be rendered\n      // If activeTab does not equal 'instructions', the expression will be false and the block of html will not be rendered\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          dangerouslySetInnerHTML: {\n            __html: details.summary\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          dangerouslySetInnerHTML: {\n            __html: details.instructions\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), activeTab === 'ingredients' &&\n      /*#__PURE__*/\n      // The && operator is a logical operator that will evaluate to the value of the second operand if the first operand is true, and will evaluate to false if the first operand is false\n      // If activeTab equals 'ingredients', this expression will be true and the block of html that follows will be rendered\n      // If activeTab does not equal 'ingredients', the expression will be false and the block of html will not be rendered\n      _jsxDEV(\"ul\", {\n        children: details.extendedIngredients.map(ingredient => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: ingredient.original\n        }, ingredient.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 26\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n// Reference: https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export \n// The export statement exports the function Recipe from this module so that it can be used by other parts of your program\n_s(Recipe, \"/JPBvur58RjBwvO+xXEOr2ne3sw=\", false, function () {\n  return [useParams];\n});\n_c = Recipe;\nexport default Recipe;\nvar _c;\n$RefreshReg$(_c, \"Recipe\");","map":{"version":3,"names":["useEffect","useState","useParams","React","Recipe","params","details","setDetails","activeTab","setActiveTab","fetchDetails","data","fetch","name","detailData","json","title","image","__html","summary","instructions","extendedIngredients","map","ingredient","original","id"],"sources":["/Users/KellyCastillo/finalproject/src/pages/Recipe.jsx"],"sourcesContent":["// Imports useEffect and useState React features \n// Reference: https://reactjs.org/docs/hooks-intro.html\nimport { useEffect, useState } from \"react\";\n// Imports the useParams hook from React Router\n// Reference: https://javascript.plainenglish.io/react-router-how-to-use-the-useparams-hook-321a6461732\nimport { useParams } from \"react-router-dom\";\nimport React from \"react\";\n\nfunction Recipe() {\n\n    // useParams returns an object that contains the parameters of the current URL\n    // useParams is being used to asign the returned object to a variable called params\n    // Example: If the URL of the React Router component is /products/123, \n    // and the route is defined with a dynamic parameter like /products/:productId, \n    // then the object returned by useParams would be { productId: '123' }\n    // You can then access the value of the productId parameter by accessing params.productId.\n    let params = useParams();\n    // useState declares a \"state variable\" called details\n    // useState returns an array with two items: the current state of details, which is set to the initial state of an empty object useState({})\n    // setDetails is the function that updates the current state\n    const [details, setDetails] = useState({});\n    // useState declares a \"state variable\" called activeTab\n    // useState returns an array with two items: the current state of details, which is set to the initial state of an string \"instructions\"\n    // setActive is the function that updates the current state\n    const [activeTab, setActiveTab] = useState(\"instructions\");\n\n    // Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\n    // The async function is a way to write asynchronous code in JavaScript, allowing other code to run in the meantime\n    // The async function is a special type of function that returns a promise\n    // A promise is an object that represents the result of the async function\n    // The await expression pauses the execution of the function until a promise is resolved\n    // The fetchDetails function sends an HTTP request to the Spoonacular API and waits for a response\n    // Once the response is received, it converts the response to JSON and returns the resulting data\n    // setDetails(detailData) will update the current state of the details state variable to the value of the object detailData\n    const fetchDetails = async () => {\n        const data = await fetch(`https://api.spoonacular.com/recipes/${params.name}/information?apiKey=e651b079eb2a4f55a0b04627fff59f28`\n        );\n        const detailData = await data.json();\n        setDetails(detailData);\n    };\n\n    // The function passed to useEffect calls a function called fetchDetails\n    // The second argument to useEffect is an array containing the params.name variable\n    // This means that the fetchDetails function will be called after the component renders and any time the params.name value changes\n    useEffect(() => {\n        fetchDetails();\n    }, [params.name]);\n\n    // html that is returned by the function fetchDetails\n    return (\n        <div className=\"detailWrapper\">\n            <section>\n                <h2>{details.title}</h2>\n                <img src={details.image} alt=\"\" />\n            </section>\n            <div className=\"info\">\n                <button \n                // If activeTab equals \"instructions,\" then add the class \"active\" to it, else do not add anything\n                // When Instructions button is clicked, a function runs so that setActiveTab is set to \"instructions\"\n                    className={activeTab === 'instructions' ? 'active' : ''} \n                    onClick={() => setActiveTab(\"instructions\")}\n                >\n                    Instructions\n                </button>\n                <button \n                // If activeTab equals \"ingredients,\" then add the class \"active\" to it, else do not add anything\n                // When Ingredients button is clicked, a function runs so that setActiveTab is set to \"ingredients\"\n                    className={activeTab === 'ingredients' ? 'active' : ''} \n                    onClick={() => setActiveTab(\"ingredients\")}\n                >\n                    Ingredients\n                </button>\n                {activeTab === 'instructions' && (\n                // The && operator is a logical operator that will evaluate to the value of the second operand if the first operand is true, and will evaluate to false if the first operand is false\n                // If activeTab equals 'instructions', this expression will be true and the block of html that follows will be rendered\n                // If activeTab does not equal 'instructions', the expression will be false and the block of html will not be rendered\n                    <div>\n                        <h3 dangerouslySetInnerHTML={{__html: details.summary}}></h3>\n                        <h3 dangerouslySetInnerHTML={{__html: details.instructions}}></h3>\n                    </div>\n                )}\n                {activeTab === 'ingredients' && (\n                // The && operator is a logical operator that will evaluate to the value of the second operand if the first operand is true, and will evaluate to false if the first operand is false\n                // If activeTab equals 'ingredients', this expression will be true and the block of html that follows will be rendered\n                // If activeTab does not equal 'ingredients', the expression will be false and the block of html will not be rendered\n                     <ul>\n                     {details.extendedIngredients.map((ingredient) => (\n                         <li key={ingredient.id}>{ingredient.original}</li>\n                     ))}\n                 </ul>\n                )}\n            </div>\n        </div>\n    );\n\n}\n\n// Reference: https://developer.mozilla.org/en-US/docs/web/javascript/reference/statements/export \n// The export statement exports the function Recipe from this module so that it can be used by other parts of your program\nexport default Recipe"],"mappings":";;AAAA;AACA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C;AACA;AACA,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,SAASC,MAAM,GAAG;EAAA;EAEd;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,MAAM,GAAGH,SAAS,EAAE;EACxB;EACA;EACA;EACA,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C;EACA;EACA;EACA,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,cAAc,CAAC;;EAE1D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMS,YAAY,GAAG,YAAY;IAC7B,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,uCAAsCP,MAAM,CAACQ,IAAK,sDAAqD,CAChI;IACD,MAAMC,UAAU,GAAG,MAAMH,IAAI,CAACI,IAAI,EAAE;IACpCR,UAAU,CAACO,UAAU,CAAC;EAC1B,CAAC;;EAED;EACA;EACA;EACAd,SAAS,CAAC,MAAM;IACZU,YAAY,EAAE;EAClB,CAAC,EAAE,CAACL,MAAM,CAACQ,IAAI,CAAC,CAAC;;EAEjB;EACA,oBACI;IAAK,SAAS,EAAC,eAAe;IAAA,wBAC1B;MAAA,wBACI;QAAA,UAAKP,OAAO,CAACU;MAAK;QAAA;QAAA;QAAA;MAAA,QAAM,eACxB;QAAK,GAAG,EAAEV,OAAO,CAACW,KAAM;QAAC,GAAG,EAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA,QAC5B,eACV;MAAK,SAAS,EAAC,MAAM;MAAA,wBACjB;QACA;QACA;QACI,SAAS,EAAET,SAAS,KAAK,cAAc,GAAG,QAAQ,GAAG,EAAG;QACxD,OAAO,EAAE,MAAMC,YAAY,CAAC,cAAc,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGvC,eACT;QACA;QACA;QACI,SAAS,EAAED,SAAS,KAAK,aAAa,GAAG,QAAQ,GAAG,EAAG;QACvD,OAAO,EAAE,MAAMC,YAAY,CAAC,aAAa,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGtC,EACRD,SAAS,KAAK,cAAc;MAAA;MAC7B;MACA;MACA;MACI;QAAA,wBACI;UAAI,uBAAuB,EAAE;YAACU,MAAM,EAAEZ,OAAO,CAACa;UAAO;QAAE;UAAA;UAAA;UAAA;QAAA,QAAM,eAC7D;UAAI,uBAAuB,EAAE;YAACD,MAAM,EAAEZ,OAAO,CAACc;UAAY;QAAE;UAAA;UAAA;UAAA;QAAA,QAAM;MAAA;QAAA;QAAA;QAAA;MAAA,QAEzE,EACAZ,SAAS,KAAK,aAAa;MAAA;MAC5B;MACA;MACA;MACK;QAAA,UACCF,OAAO,CAACe,mBAAmB,CAACC,GAAG,CAAEC,UAAU,iBACxC;UAAA,UAAyBA,UAAU,CAACC;QAAQ,GAAnCD,UAAU,CAACE,EAAE;UAAA;UAAA;UAAA;QAAA,QACzB;MAAC;QAAA;QAAA;QAAA;MAAA,QAEN;IAAA;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAGd;;AAEA;AACA;AAAA,GA1FSrB,MAAM;EAAA,QAQEF,SAAS;AAAA;AAAA,KARjBE,MAAM;AA2Ff,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}